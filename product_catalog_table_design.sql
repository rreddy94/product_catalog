CREATE TABLE ROLE(
ROLE_ID INT PRIMARY KEY,
ROLE_NAME VARCHAR(30)
);

CREATE TABLE CART(
CART_ID INT PRIMARY KEY,
CREATED_BY VARCHAR(30),
CREATED_ON DATE,
UPDATED_BY VARCHAR(30),
UPDATED_ON DATE
);

CREATE TABLE "USER"(
USER_ID INT PRIMARY KEY,
FIRST_NAME VARCHAR(30),
LAST_NAME VARCHAR(30),
EMAIL VARCHAR(30) UNIQUE,
PASSWORD VARCHAR(30),
CREATED_BY VARCHAR(30),
CREATED_ON DATE,
CART_ID INT UNIQUE,
ROLE_ID INT,
UPDATED_ON DATE,
UPDATED_BY VARCHAR(30),
FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID),/* (ONE TO ONE RELATION WITH SHOP_CART TABLE) */
FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ROLE_ID)); /* (MANY TO ONE RELATION WITH ROLE TABLE) */ 

CREATE TABLE USER_HISTORY(
ID INT PRIMARY KEY,
DESCRIPTION VARCHAR(30),
USER_ID INT,
CREATED_BY VARCHAR(30),
CREATED_ON DATE,
FOREIGN KEY (USER_ID) REFERENCES "USER"(USER_ID)
); /* (MANY TO ONE RELATION WITH USER TABLE) */


CREATE TABLE CATEGORY(
CATEGORY_ID INT PRIMARY KEY,
CATEGORY_NAME VARCHAR(30),
DESCRIPTION VARCHAR(30),
CREATED_BY VARCHAR(30),
CREATED_ON DATE,
UPDATED_BY VARCHAR(30),
UPDATED_ON DATE
);

CREATE TABLE PRODUCT(
PRODUCT_ID INT PRIMARY KEY,
PRODUCT_NAME VARCHAR(30),
DESCRIPTION VARCHAR(30),
CREATED_BY VARCHAR(30),
CREATED_ON DATE,
UPDATED_BY VARCHAR(30),
UPDATED_ON DATE,
PRICE FLOAT,
QUANTITY INT,
CATEGORY_ID INT,
FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID) /* (MANY TO ONE RELATION WITH SHOP_CART TABLE) */);

CREATE TABLE CART_PRODUCT( /* created table only to define relationship can be ignored*/
ID INT PRIMARY KEY,
CART_ID INT,
PRODUCT_ID INT,
FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID));


CREATE TABLE "ORDER"(
ORDER_ID INT PRIMARY KEY,
ADDRESS VARCHAR(30),
STATUS VARCHAR(30),
USER_ID INT,
TOTAL_AMOUNT FLOAT,
CREATED_BY VARCHAR(30),
CREATED_ON DATE,
UPDATED_BY VARCHAR(30),
UPDATED_ON DATE,
FOREIGN KEY (USER_ID) REFERENCES "USER"(USER_ID)); 



CREATE TABLE ORDER_PRODUCT(  /* created table only to define relationship can be ignored*/
ID INT PRIMARY KEY,
CART_ID INT,
PRODUCT_ID INT,
FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);